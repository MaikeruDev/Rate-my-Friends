(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('firebaseui'), require('@angular/fire'), require('@angular/fire/auth'), require('firebase/auth'), require('firebase/app'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('firebaseui-angular', ['exports', '@angular/core', 'firebaseui', '@angular/fire', '@angular/fire/auth', 'firebase/auth', 'firebase/app', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['firebaseui-angular'] = {}, global.ng.core, global.firebaseui$1, global.ng.fire, global.ng.fire.auth, null, global.firebaseOriginal, global.ng.common));
}(this, (function (exports, core, firebaseui$1, fire, auth, auth$1, firebaseOriginal, common) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var firebaseui__namespace = /*#__PURE__*/_interopNamespace(firebaseui$1);
    var firebaseOriginal__default = /*#__PURE__*/_interopDefaultLegacy(firebaseOriginal);

    var FirebaseuiAngularLibraryService = /** @class */ (function () {
        function FirebaseuiAngularLibraryService(options, nameOrConfig, zone) {
            // noinspection JSNonASCIINames
            var app = fire.ÉµfirebaseAppFactory(options, zone, nameOrConfig);
            // store the firebaseui instance on the window object to prevent double initialization
            if (!window.firebaseUiInstance) {
                window.firebaseUiInstance = new firebaseui$1.auth.AuthUI(app.auth());
            }
            this.firebaseUiInstance = window.firebaseUiInstance;
        }
        return FirebaseuiAngularLibraryService;
    }());
    FirebaseuiAngularLibraryService.decorators = [
        { type: core.Injectable }
    ];
    FirebaseuiAngularLibraryService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [fire.FIREBASE_OPTIONS,] }] },
        { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [fire.FIREBASE_APP_NAME,] }] },
        { type: core.NgZone }
    ]; };

    var FirebaseuiAngularLibraryComponent = /** @class */ (function () {
        function FirebaseuiAngularLibraryComponent(angularFireAuth, _firebaseUiConfig, _firebaseUiConfig_Feature, ngZone, firebaseUIService) {
            this.angularFireAuth = angularFireAuth;
            this._firebaseUiConfig = _firebaseUiConfig;
            this._firebaseUiConfig_Feature = _firebaseUiConfig_Feature;
            this.ngZone = ngZone;
            this.firebaseUIService = firebaseUIService;
            this.signInSuccessWithAuthResultCallback = new core.EventEmitter(); // tslint:disable-line
            this.signInFailureCallback = new core.EventEmitter(); // tslint:disable-line
            this.uiShownCallback = new core.EventEmitter(); // tslint:disable-line
        }
        Object.defineProperty(FirebaseuiAngularLibraryComponent.prototype, "firebaseUiConfig", {
            get: function () {
                return Object.assign(Object.assign({}, this._firebaseUiConfig), this._firebaseUiConfig_Feature);
            },
            enumerable: false,
            configurable: true
        });
        FirebaseuiAngularLibraryComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.subscription = this.angularFireAuth.authState.subscribe(function (value) {
                if ((value && value.isAnonymous) || !value) {
                    if (_this.firebaseUiConfig.signInOptions.length !== 0) {
                        _this.firebaseUIPopup();
                    }
                    else {
                        throw new Error('There must be at least one AuthProvider.');
                    }
                }
            });
        };
        FirebaseuiAngularLibraryComponent.prototype.ngOnDestroy = function () {
            if (!!this.subscription) {
                this.subscription.unsubscribe();
            }
        };
        FirebaseuiAngularLibraryComponent.prototype.getUIAuthConfig = function () {
            if (!this.firebaseUiConfig.callbacks) {
                this._firebaseUiConfig[FirebaseuiAngularLibraryComponent.COMPUTED_CALLBACKS] = true;
                this._firebaseUiConfig.callbacks = this.getCallbacks();
            }
            return this.firebaseUiConfig;
        };
        FirebaseuiAngularLibraryComponent.prototype.firebaseUIPopup = function () {
            var firebaseUiInstance = this.firebaseUIService.firebaseUiInstance;
            var uiAuthConfig = this.getUIAuthConfig();
            // Check if callbacks got computed to reset them again after providing the to firebaseui.
            // Necessary for allowing updating the firebaseui config during runtime.
            var resetCallbacks = false;
            if (uiAuthConfig[FirebaseuiAngularLibraryComponent.COMPUTED_CALLBACKS]) {
                resetCallbacks = true;
                delete uiAuthConfig[FirebaseuiAngularLibraryComponent.COMPUTED_CALLBACKS];
            }
            // show the firebaseui
            firebaseUiInstance.start('#firebaseui-auth-container', uiAuthConfig);
            if (resetCallbacks) {
                this._firebaseUiConfig.callbacks = null;
            }
        };
        FirebaseuiAngularLibraryComponent.prototype.getCallbacks = function () {
            var _this = this;
            var signInSuccessWithAuthResultCallback = function (authResult, redirectUrl) {
                _this.ngZone.run(function () {
                    _this.signInSuccessWithAuthResultCallback.emit({
                        authResult: authResult,
                        redirectUrl: redirectUrl
                    });
                });
                return _this.firebaseUiConfig.signInSuccessUrl;
            };
            var signInFailureCallback = function (error) {
                _this.ngZone.run(function () {
                    _this.signInFailureCallback.emit({
                        code: error.code,
                        credential: error.credential
                    });
                });
                return Promise.reject();
            };
            var uiShownCallback = function () {
                _this.ngZone.run(function () {
                    _this.uiShownCallback.emit();
                });
            };
            return {
                signInSuccessWithAuthResult: signInSuccessWithAuthResultCallback,
                signInFailure: signInFailureCallback,
                uiShown: uiShownCallback
            };
        };
        return FirebaseuiAngularLibraryComponent;
    }());
    FirebaseuiAngularLibraryComponent.COMPUTED_CALLBACKS = 'COMPUTED_CALLBACKS';
    FirebaseuiAngularLibraryComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'firebase-ui',
                    template: '<div id="firebaseui-auth-container"></div>'
                },] }
    ];
    FirebaseuiAngularLibraryComponent.ctorParameters = function () { return [
        { type: auth.AngularFireAuth },
        { type: undefined, decorators: [{ type: core.Inject, args: ['firebaseUIAuthConfig',] }] },
        { type: undefined, decorators: [{ type: core.Inject, args: ['firebaseUIAuthConfigFeature',] }] },
        { type: core.NgZone },
        { type: FirebaseuiAngularLibraryService }
    ]; };
    FirebaseuiAngularLibraryComponent.propDecorators = {
        signInSuccessWithAuthResultCallback: [{ type: core.Output, args: ['signInSuccessWithAuthResult',] }],
        signInFailureCallback: [{ type: core.Output, args: ['signInFailure',] }],
        uiShownCallback: [{ type: core.Output, args: ['uiShown',] }]
    };

    /*
     * Created by Raphael Jenni
     * Copyright (c) 2017 Raphael Jenni
     */
    var firebase = firebaseOriginal__default['default'];
    var firebaseui = firebaseui__namespace;
    var FirebaseUISignInSuccessWithAuthResult = /** @class */ (function () {
        function FirebaseUISignInSuccessWithAuthResult() {
        }
        return FirebaseUISignInSuccessWithAuthResult;
    }());
    var FirebaseUISignInFailure = /** @class */ (function () {
        function FirebaseUISignInFailure() {
        }
        return FirebaseUISignInFailure;
    }());

    var FirebaseUIModule = /** @class */ (function () {
        function FirebaseUIModule() {
        }
        FirebaseUIModule.forRoot = function (firebaseUiAuthConfig) {
            return {
                ngModule: FirebaseUIModule,
                providers: [
                    { provide: 'firebaseUIAuthConfig', useValue: firebaseUiAuthConfig },
                    { provide: 'firebaseUIAuthConfigFeature', useValue: {} }
                ]
            };
        };
        FirebaseUIModule.forFeature = function (firebaseUIAuthConfig) {
            return {
                ngModule: FirebaseUIModule,
                providers: [
                    { provide: 'firebaseUIAuthConfigFeature', useValue: firebaseUIAuthConfig }
                ]
            };
        };
        return FirebaseUIModule;
    }());
    FirebaseUIModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [FirebaseuiAngularLibraryComponent],
                    providers: [FirebaseuiAngularLibraryService],
                    exports: [FirebaseuiAngularLibraryComponent]
                },] }
    ];

    /*
     * Public API Surface of firebaseui-angular-library
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.FirebaseUIModule = FirebaseUIModule;
    exports.FirebaseUISignInFailure = FirebaseUISignInFailure;
    exports.FirebaseUISignInSuccessWithAuthResult = FirebaseUISignInSuccessWithAuthResult;
    exports.FirebaseuiAngularLibraryComponent = FirebaseuiAngularLibraryComponent;
    exports.FirebaseuiAngularLibraryService = FirebaseuiAngularLibraryService;
    exports.firebase = firebase;
    exports.firebaseui = firebaseui;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=firebaseui-angular.umd.js.map
