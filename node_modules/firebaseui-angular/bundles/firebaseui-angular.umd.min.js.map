{"version":3,"sources":["../../projects/firebaseui-angular-library/src/lib/firebaseui-angular-library.service.ts","../../projects/firebaseui-angular-library/src/lib/firebaseui-angular-library.component.ts","../../projects/firebaseui-angular-library/src/lib/firebaseui-angular-library.helper.ts","../../projects/firebaseui-angular-library/src/lib/firebaseui-angular-library.module.ts"],"names":["options","nameOrConfig","zone","app","ɵfirebaseAppFactory","window","firebaseUiInstance","firebaseui.auth","AuthUI","auth","this","Injectable","Inject","args","FIREBASE_OPTIONS","Optional","type","FIREBASE_APP_NAME","NgZone","FirebaseuiAngularLibraryComponent","angularFireAuth","_firebaseUiConfig","_firebaseUiConfig_Feature","ngZone","firebaseUIService","signInSuccessWithAuthResultCallback","EventEmitter","signInFailureCallback","uiShownCallback","Object","defineProperty","prototype","assign","ngOnInit","_this","subscription","authState","subscribe","value","isAnonymous","firebaseUiConfig","signInOptions","length","Error","firebaseUIPopup","ngOnDestroy","unsubscribe","getUIAuthConfig","callbacks","COMPUTED_CALLBACKS","getCallbacks","uiAuthConfig","resetCallbacks","start","signInSuccessWithAuthResult","authResult","redirectUrl","run","emit","signInSuccessUrl","signInFailure","error","code","credential","Promise","reject","uiShown","Component","selector","template","AngularFireAuth","FirebaseuiAngularLibraryService","Output","firebase","firebaseOriginal","firebaseui","firebaseuiOriginal","FirebaseUIModule","forRoot","firebaseUiAuthConfig","ngModule","providers","provide","useValue","forFeature","firebaseUIAuthConfig","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import {Inject, Injectable, NgZone, Optional} from '@angular/core';\nimport * as firebaseui from 'firebaseui';\nimport {FIREBASE_APP_NAME, FIREBASE_OPTIONS, FirebaseApp, FirebaseAppConfig, FirebaseOptions, ɵfirebaseAppFactory} from '@angular/fire';\n\n@Injectable()\nexport class FirebaseuiAngularLibraryService {\n  public firebaseUiInstance: firebaseui.auth.AuthUI;\n\n  constructor(@Inject(FIREBASE_OPTIONS) options: FirebaseOptions,\n              @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig: string | FirebaseAppConfig | null | undefined,\n              zone: NgZone) {\n    // noinspection JSNonASCIINames\n    const app: FirebaseApp = ɵfirebaseAppFactory(options, zone, nameOrConfig);\n    // store the firebaseui instance on the window object to prevent double initialization\n    if (!(<any>window).firebaseUiInstance) {\n      (<any>window).firebaseUiInstance = new firebaseui.auth.AuthUI(app.auth());\n    }\n    this.firebaseUiInstance = (<any>window).firebaseUiInstance as firebaseui.auth.AuthUI;\n  }\n}\n","import {Component, EventEmitter, Inject, NgZone, OnDestroy, OnInit, Output} from '@angular/core';\nimport {AngularFireAuth} from '@angular/fire/auth';\nimport {Subscription} from 'rxjs';\nimport {\n  FirebaseUISignInFailure,\n  FirebaseUISignInSuccessWithAuthResult,\n  NativeFirebaseUIAuthConfig,\n} from './firebaseui-angular-library.helper';\nimport * as firebaseui from 'firebaseui';\nimport firebase from 'firebase/app';\nimport {FirebaseuiAngularLibraryService} from './firebaseui-angular-library.service';\nimport 'firebase/auth';\nimport User = firebase.User;\nimport UserCredential = firebase.auth.UserCredential;\n\n@Component({\n  selector: 'firebase-ui',\n  template: '<div id=\"firebaseui-auth-container\"></div>'\n})\nexport class FirebaseuiAngularLibraryComponent implements OnInit, OnDestroy {\n  private static readonly COMPUTED_CALLBACKS = 'COMPUTED_CALLBACKS';\n\n  @Output('signInSuccessWithAuthResult') signInSuccessWithAuthResultCallback: EventEmitter<FirebaseUISignInSuccessWithAuthResult> = new EventEmitter(); // tslint:disable-line\n  @Output('signInFailure') signInFailureCallback: EventEmitter<FirebaseUISignInFailure> = new EventEmitter(); // tslint:disable-line\n  @Output('uiShown') uiShownCallback: EventEmitter<void> = new EventEmitter(); // tslint:disable-line\n\n  private subscription: Subscription;\n\n  constructor(private angularFireAuth: AngularFireAuth,\n              @Inject('firebaseUIAuthConfig') private _firebaseUiConfig: NativeFirebaseUIAuthConfig,\n              @Inject('firebaseUIAuthConfigFeature') private _firebaseUiConfig_Feature: NativeFirebaseUIAuthConfig,\n              private ngZone: NgZone,\n              private firebaseUIService: FirebaseuiAngularLibraryService) {\n  }\n\n  get firebaseUiConfig(): NativeFirebaseUIAuthConfig {\n    return {\n      ...this._firebaseUiConfig,\n      ...this._firebaseUiConfig_Feature\n    } as NativeFirebaseUIAuthConfig;\n  }\n\n  ngOnInit(): void {\n    this.subscription = this.angularFireAuth.authState.subscribe((value: User) => {\n      if ((value && value.isAnonymous) || !value) {\n        if (this.firebaseUiConfig.signInOptions.length !== 0) {\n          this.firebaseUIPopup();\n        } else {\n          throw new Error('There must be at least one AuthProvider.');\n        }\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (!!this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  private getUIAuthConfig(): NativeFirebaseUIAuthConfig {\n    if (!(this.firebaseUiConfig as NativeFirebaseUIAuthConfig).callbacks) {\n      this._firebaseUiConfig[FirebaseuiAngularLibraryComponent.COMPUTED_CALLBACKS] = true;\n      (this._firebaseUiConfig as NativeFirebaseUIAuthConfig).callbacks = this.getCallbacks();\n    }\n    return (this.firebaseUiConfig as NativeFirebaseUIAuthConfig);\n  }\n\n  private firebaseUIPopup() {\n    const firebaseUiInstance = this.firebaseUIService.firebaseUiInstance;\n    const uiAuthConfig = this.getUIAuthConfig();\n\n    // Check if callbacks got computed to reset them again after providing the to firebaseui.\n    // Necessary for allowing updating the firebaseui config during runtime.\n    let resetCallbacks = false;\n    if (uiAuthConfig[FirebaseuiAngularLibraryComponent.COMPUTED_CALLBACKS]) {\n      resetCallbacks = true;\n      delete uiAuthConfig[FirebaseuiAngularLibraryComponent.COMPUTED_CALLBACKS];\n    }\n\n    // show the firebaseui\n    firebaseUiInstance.start('#firebaseui-auth-container', uiAuthConfig);\n\n    if (resetCallbacks) {\n      (this._firebaseUiConfig as NativeFirebaseUIAuthConfig).callbacks = null;\n    }\n  }\n\n  private getCallbacks(): any { // firebaseui.Callbacks\n    const signInSuccessWithAuthResultCallback = (authResult: UserCredential, redirectUrl) => {\n      this.ngZone.run(() => {\n        this.signInSuccessWithAuthResultCallback.emit({\n          authResult,\n          redirectUrl\n        });\n      });\n      return this.firebaseUiConfig.signInSuccessUrl;\n    };\n\n    const signInFailureCallback = (error: firebaseui.auth.AuthUIError) => {\n      this.ngZone.run(() => {\n        this.signInFailureCallback.emit({\n          code: error.code,\n          credential: error.credential\n        });\n      });\n      return Promise.reject();\n    };\n\n    const uiShownCallback = () => {\n      this.ngZone.run(() => {\n        this.uiShownCallback.emit();\n      });\n    };\n\n    return {\n      signInSuccessWithAuthResult: signInSuccessWithAuthResultCallback,\n      signInFailure: signInFailureCallback,\n      uiShown: uiShownCallback\n    };\n  }\n}\n","/*\n * Created by Raphael Jenni\n * Copyright (c) 2017 Raphael Jenni\n */\n\nimport * as firebaseuiOriginal from 'firebaseui';\nimport firebaseOriginal from 'firebase/app';\nimport UserCredential = firebaseOriginal.auth.UserCredential;\nimport AuthCredential = firebaseOriginal.auth.AuthCredential;\n\nexport const firebase = firebaseOriginal;\nexport const firebaseui = firebaseuiOriginal;\n\nexport type NativeFirebaseUIAuthConfig = firebaseuiOriginal.auth.Config;\n\n\nexport class FirebaseUISignInSuccessWithAuthResult {\n  authResult: UserCredential;\n  redirectUrl: string;\n}\n\nexport class FirebaseUISignInFailure {\n  code: string;\n  credential: AuthCredential;\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {FirebaseuiAngularLibraryComponent} from './firebaseui-angular-library.component';\nimport {CommonModule} from '@angular/common';\nimport {NativeFirebaseUIAuthConfig} from './firebaseui-angular-library.helper';\nimport {FirebaseuiAngularLibraryService} from './firebaseui-angular-library.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [FirebaseuiAngularLibraryComponent],\n  providers: [FirebaseuiAngularLibraryService],\n  exports: [FirebaseuiAngularLibraryComponent]\n})\nexport class FirebaseUIModule {\n  static forRoot(firebaseUiAuthConfig: NativeFirebaseUIAuthConfig): ModuleWithProviders<FirebaseUIModule> {\n    return {\n      ngModule: FirebaseUIModule,\n      providers: [\n        {provide: 'firebaseUIAuthConfig', useValue: firebaseUiAuthConfig},\n        {provide: 'firebaseUIAuthConfigFeature', useValue: {}}\n      ]\n    };\n  }\n\n  static forFeature(firebaseUIAuthConfig: NativeFirebaseUIAuthConfig | any): ModuleWithProviders<FirebaseUIModule> {\n    return {\n      ngModule: FirebaseUIModule,\n      providers: [\n        {provide: 'firebaseUIAuthConfigFeature', useValue: firebaseUIAuthConfig}\n      ]\n    };\n  }\n}\n"]}