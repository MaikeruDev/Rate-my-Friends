{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\n/**\n * @name Firebase\n * @capacitorincompatible true\n * @description\n * This plugin brings push notifications, analytics, event tracking, crash reporting and more from Google Firebase to your Cordova project! Android and iOS supported (including iOS 10).\n *\n * @usage\n * ```typescript\n * import { Firebase } from '@ionic-native/firebase/ngx';\n *\n * constructor(private firebase: Firebase) { }\n *\n * ...\n *\n * this.firebase.getToken()\n *   .then(token => console.log(`The token is ${token}`)) // save the token server-side and use it to push notifications to this device\n *   .catch(error => console.error('Error getting token', error));\n *\n * this.firebase.onNotificationOpen()\n *    .subscribe(data => console.log(`User opened a notification ${data}`));\n *\n * this.firebase.onTokenRefresh()\n *   .subscribe((token: string) => console.log(`Got a new token ${token}`));\n *\n * ```\n */\nexport declare class Firebase extends IonicNativePlugin {\n    /**\n     * Get the device token\n     * @return {Promise<null | string>} Note that token will be null if it has not been established yet\n     */\n    getToken(): Promise<null | string>;\n    /**\n     * Get notified when a token is refreshed\n     * @return {Observable<any>}\n     */\n    onTokenRefresh(): Observable<any>;\n    /**\n     * Get notified when the user opens a notification\n     * @return {Observable<any>}\n     */\n    onNotificationOpen(): Observable<any>;\n    /**\n     * Grant permission to receive push notifications\n     * @return {Promise<any>}\n     */\n    grantPermission(): Promise<any>;\n    /**\n     * Check permission to receive push notifications\n     * @return {Promise<{isEnabled: boolean}>}\n     */\n    hasPermission(): Promise<{\n        isEnabled: boolean;\n    }>;\n    /**\n     * Set icon badge number. Set to 0 to clear the badge.\n     * @param {number} badgeNumber\n     * @return {Promise<any>}\n     */\n    setBadgeNumber(badgeNumber: number): Promise<any>;\n    /**\n     * Get icon badge number\n     * @return {Promise<any>}\n     */\n    getBadgeNumber(): Promise<any>;\n    /**\n     * Subscribe to a topic\n     * @param {string} topic\n     * @return {Promise<any>}\n     */\n    subscribe(topic: string): Promise<any>;\n    /**\n     * Unsubscribe from a topic\n     * @param {string} topic\n     * @return {Promise<any>}\n     */\n    unsubscribe(topic: string): Promise<any>;\n    /**\n     * Unregister from firebase, used to stop receiving push notifications.\n     * Call this when you logout user from your app.\n     */\n    unregister(): Promise<any>;\n    /**\n     * Log an event using Analytics\n     * @param {string} type\n     * @param {Object} data\n     * @return {Promise<any>}\n     */\n    logEvent(type: string, data: any): Promise<any>;\n    /**\n     * Log an Error using FirebaseCrash\n     * @param {string} message\n     * @return {Promise<any>}\n     */\n    logError(message: string): Promise<any>;\n    /**\n     * Set the name of the current screen in Analytics\n     * @param {string} name Screen name\n     * @return {Promise<any>}\n     */\n    setScreenName(name: string): Promise<any>;\n    /**\n     * Set a user id for use in Analytics\n     * @param {string} userId\n     * @return {Promise<any>}\n     */\n    setUserId(userId: string): Promise<any>;\n    /**\n     * Set a user property for use in Analytics\n     * @param {string} name\n     * @param {string} value\n     * @return {Promise<any>}\n     */\n    setUserProperty(name: string, value: string): Promise<any>;\n    /**\n     * Fetch Remote Config parameter values for your app\n     * @param {number} [cacheExpirationSeconds]\n     * @return {Promise<any>}\n     */\n    fetch(cacheExpirationSeconds?: number): Promise<any>;\n    /**\n     * Activate the Remote Config fetched config\n     * @return {Promise<any>}\n     */\n    activateFetched(): Promise<any>;\n    /**\n     * Retrieve a Remote Config value\n     * @param {string} key\n     * @param {string} [namespace]\n     * @return {Promise<any>}\n     */\n    getValue(key: string, namespace?: string): Promise<any>;\n    /**\n     * Retrieve a Remote Config byte array\n     * @param {string} key\n     * @param {string} [namespace]\n     * @return {Promise<any>}\n     */\n    getByteArray(key: string, namespace?: string): Promise<any>;\n    /**\n     * Get the current state of the FirebaseRemoteConfig singleton object\n     * @return {Promise<any>}\n     */\n    getInfo(): Promise<any>;\n    /**\n     * Change the settings for the FirebaseRemoteConfig object's operations\n     * @param {Object} settings\n     * @return {Promise<any>}\n     */\n    setConfigSettings(settings: any): Promise<any>;\n    /**\n     * Set defaults in the Remote Config\n     * @param {Object} defaults\n     * @param {string} [namespace]\n     * @return {Promise<any>}\n     */\n    setDefaults(defaults: any, namespace?: string): Promise<any>;\n    /**\n     * Start a trace.\n     * @param {string} trace Trace name\n     */\n    startTrace(trace: string): Promise<any>;\n    /**\n     * To count the performance-related events that occur in your app (such as cache hits or retries), add a line of code\n     * similar to the following whenever the event occurs, using a string other than retry to name that event if you are\n     * counting a different type of event:\n     * @param {string} trace Trace name\n     * @param {string} counter Counter\n     */\n    incrementCounter(trace: string, counter: string): Promise<any>;\n    /**\n     * Stop the trace\n     * @param {string} trace Trace name\n     */\n    stopTrace(trace: string): void;\n    /**\n     * Allows the user to enable/disable analytics collection\n     * @param {boolean} enabled value to set collection\n     * @returns {Promise<any>}\n     */\n    setAnalyticsCollectionEnabled(enabled: boolean): Promise<any>;\n    /**\n     * Allows the user to set User Identifier for crashlytics reporting\n     * https://firebase.google.com/docs/crashlytics/customize-crash-reports?authuser=0#set_user_ids\n     * @param {string} userId value to set the userId\n     * @returns {Promise<any>}\n     */\n    setCrashlyticsUserId(userId: string): Promise<any>;\n    /**\n     * Sends an SMS to the user with the SMS verification code and returns the Verification ID required to sign in using phone authentication\n     * @param {string} phoneNumber The phone number, including '+' and country code\n     * @param {number} timeoutDuration (Android only) The timeout in sec - no more SMS will be sent to this number until this timeout expires\n     * @returns {Promise<any>}\n     */\n    verifyPhoneNumber(phoneNumber: string, timeoutDuration?: number): Promise<any>;\n    /**\n     * Clear all pending notifications from the drawer\n     * @return {Promise<any>}\n     */\n    clearAllNotifications(): Promise<any>;\n}\n"]}