var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var FirebaseOriginal = /** @class */ (function (_super) {
    __extends(FirebaseOriginal, _super);
    function FirebaseOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseOriginal.prototype.getToken = function () { return cordova(this, "getToken", {}, arguments); };
    FirebaseOriginal.prototype.onTokenRefresh = function () { return cordova(this, "onTokenRefresh", { "observable": true }, arguments); };
    FirebaseOriginal.prototype.onNotificationOpen = function () { return cordova(this, "onNotificationOpen", { "observable": true }, arguments); };
    FirebaseOriginal.prototype.grantPermission = function () { return cordova(this, "grantPermission", { "platforms": ["iOS"] }, arguments); };
    FirebaseOriginal.prototype.hasPermission = function () { return cordova(this, "hasPermission", {}, arguments); };
    FirebaseOriginal.prototype.setBadgeNumber = function (badgeNumber) { return cordova(this, "setBadgeNumber", {}, arguments); };
    FirebaseOriginal.prototype.getBadgeNumber = function () { return cordova(this, "getBadgeNumber", {}, arguments); };
    FirebaseOriginal.prototype.subscribe = function (topic) { return cordova(this, "subscribe", {}, arguments); };
    FirebaseOriginal.prototype.unsubscribe = function (topic) { return cordova(this, "unsubscribe", {}, arguments); };
    FirebaseOriginal.prototype.unregister = function () { return cordova(this, "unregister", {}, arguments); };
    FirebaseOriginal.prototype.logEvent = function (type, data) { return cordova(this, "logEvent", {}, arguments); };
    FirebaseOriginal.prototype.logError = function (message) { return cordova(this, "logError", {}, arguments); };
    FirebaseOriginal.prototype.setScreenName = function (name) { return cordova(this, "setScreenName", {}, arguments); };
    FirebaseOriginal.prototype.setUserId = function (userId) { return cordova(this, "setUserId", {}, arguments); };
    FirebaseOriginal.prototype.setUserProperty = function (name, value) { return cordova(this, "setUserProperty", {}, arguments); };
    FirebaseOriginal.prototype.fetch = function (cacheExpirationSeconds) { return cordova(this, "fetch", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    FirebaseOriginal.prototype.activateFetched = function () { return cordova(this, "activateFetched", {}, arguments); };
    FirebaseOriginal.prototype.getValue = function (key, namespace) { return cordova(this, "getValue", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    FirebaseOriginal.prototype.getByteArray = function (key, namespace) { return cordova(this, "getByteArray", { "platforms": ["Android"] }, arguments); };
    FirebaseOriginal.prototype.getInfo = function () { return cordova(this, "getInfo", { "platforms": ["Android"] }, arguments); };
    FirebaseOriginal.prototype.setConfigSettings = function (settings) { return cordova(this, "setConfigSettings", { "platforms": ["Android"] }, arguments); };
    FirebaseOriginal.prototype.setDefaults = function (defaults, namespace) { return cordova(this, "setDefaults", { "platforms": ["Android"] }, arguments); };
    FirebaseOriginal.prototype.startTrace = function (trace) { return cordova(this, "startTrace", {}, arguments); };
    FirebaseOriginal.prototype.incrementCounter = function (trace, counter) { return cordova(this, "incrementCounter", {}, arguments); };
    FirebaseOriginal.prototype.stopTrace = function (trace) { return cordova(this, "stopTrace", {}, arguments); };
    FirebaseOriginal.prototype.setAnalyticsCollectionEnabled = function (enabled) { return cordova(this, "setAnalyticsCollectionEnabled", {}, arguments); };
    FirebaseOriginal.prototype.setCrashlyticsUserId = function (userId) { return cordova(this, "setCrashlyticsUserId", {}, arguments); };
    FirebaseOriginal.prototype.verifyPhoneNumber = function (phoneNumber, timeoutDuration) {
        if (timeoutDuration === void 0) { timeoutDuration = 0; }
        return cordova(this, "verifyPhoneNumber", { "platforms": ["Android", "iOS"], "successIndex": 2, "errorIndex": 3 }, arguments);
    };
    FirebaseOriginal.prototype.clearAllNotifications = function () { return cordova(this, "clearAllNotifications", { "platforms": ["Android"] }, arguments); };
    FirebaseOriginal.pluginName = "Firebase";
    FirebaseOriginal.plugin = "cordova-plugin-firebase";
    FirebaseOriginal.pluginRef = "FirebasePlugin";
    FirebaseOriginal.repo = "https://github.com/arnesson/cordova-plugin-firebase";
    FirebaseOriginal.platforms = ["Android", "iOS"];
    return FirebaseOriginal;
}(IonicNativePlugin));
var Firebase = new FirebaseOriginal();
export { Firebase };
//# sourceMappingURL=data:application/json;base64,